// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Doctor {
  id             String   @id @default(uuid())
  name           String
  specialty      String
  rating         Float
  profilePicture String
  bio            String?
  location       String?
  phone          String?
  email          String?
  hours          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  appointments Appointment[]
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password  String 
  image         String?
  accounts      Account[]
  sessions      Session[]

  avatar       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id        String   @id @default(uuid())
  date      String
  time      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

